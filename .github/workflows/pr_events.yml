name: Handle Pull Request Events

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, reopened, closed, ready_for_review]

jobs:
  handle-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Print GitHub event JSON
        run: |
          echo "GitHub Event JSON:"
          cat ${{ github.event_path }}
        shell: bash

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Generate Slack payload
        id: generate_payload
        run: |
          # ===== ここからデバッグコード =====
          print("--- PYTHON SCRIPT EXECUTION STARTED ---")
          import os, json, sys

          print(f"Python version: {sys.version}")
          print(f"GITHUB_EVENT_PATH env var: {os.environ.get('GITHUB_EVENT_PATH')}")
          print(f"GITHUB_EVENT_NAME env var: {os.environ.get('GITHUB_EVENT_NAME')}")

          event_data_string = None
          event = {}
          github_event_path = os.environ.get('GITHUB_EVENT_PATH')

          if github_event_path:
              try:
                  with open(github_event_path, 'r') as f:
                      event_data_string = f.read()
                  print("--- RAW EVENT DATA FROM GITHUB_EVENT_PATH ---")
                  print(event_data_string) # 生のJSON文字列を出力
                  print("--- END OF RAW EVENT DATA ---")
                  
                  if event_data_string:
                      event = json.loads(event_data_string)
                      print("JSON loaded successfully into 'event' dict.")
                  else:
                      print("!!! GITHUB_EVENT_PATH was empty.")
                      
              except Exception as e:
                  print(f"!!! Error loading or parsing GITHUB_EVENT_PATH: {e}")
                  print(f"Content read was: {event_data_string[:500]}...") # 読み取った内容の冒頭を表示
                  print("--- END OF PYTHON SCRIPT DUE TO JSON LOAD ERROR ---")
                  # exit(1) # 必要であればここで終了させる
          else:
              print("!!! GITHUB_EVENT_PATH environment variable not set.")
              # exit(1) # 必要であればここで終了させる

          if event: # eventが正常にロードされた場合のみ実行
              print("--- PARSED EVENT TOP-LEVEL KEYS ---")
              print(list(event.keys())) # 辞書のキーをリストとして表示
              print("--- END OF PARSED EVENT TOP-LEVEL KEYS ---")

              if 'pull_request' in event:
                  pr_data = event.get('pull_request', {})
                  print("--- PULL_REQUEST OBJECT KEYS ---")
                  print(list(pr_data.keys()))
                  print("--- END PULL_REQUEST OBJECT KEYS ---")

                  if 'head' in pr_data:
                      print("--- PULL_REQUEST.HEAD OBJECT (first 200 chars) ---")
                      print(json.dumps(pr_data['head'])[:200]+"...") # headオブジェクトのJSON文字列の冒頭を表示
                      print("Source branch (head.ref):", pr_data.get('head', {}).get('ref'))
                      print("--- END PULL_REQUEST.HEAD ---")
                  else:
                      print("!!! pull_request.head object NOT FOUND!")

                  if 'base' in pr_data:
                      print("--- PULL_REQUEST.BASE OBJECT (first 200 chars) ---")
                      print(json.dumps(pr_data['base'])[:200]+"...") # baseオブジェクトのJSON文字列の冒頭を表示
                      print("Target branch (base.ref):", pr_data.get('base', {}).get('ref'))
                      print("--- END PULL_REQUEST.BASE ---")
                  else:
                      print("!!! pull_request.base object NOT FOUND!")
              else:
                  print("--- 'pull_request' key NOT in event ---")
          else:
              print("!!! 'event' dictionary is empty, skipping detailed checks.")

          print("--- PROCEEDING WITH ORIGINAL SCRIPT LOGIC (IF EVENT LOADED) ---")
          sys.stdout.flush() # 強制的にバッファをフラッシュ
          # ===== ここまでデバッグコード =====

          # 以下、元のスクリプト (event辞書が空の場合の考慮が必要になるかもしれません)
          # open(os.environ['GITHUB_EVENT_PATH']) は上記で処理済みのため、
          # event 変数をそのまま使用します。

          message = None
          event_name = os.environ.get('GITHUB_EVENT_NAME', '') # GITHUB_EVENT_NAMEも上記で表示済み
          
          # eventが空でないことを確認
          if not event:
              print("Critical: event data is missing. Exiting.")
              exit(1)

          repo_info = event.get('repository')
          if not repo_info or 'full_name' not in repo_info:
              print("Critical: repository full_name is missing in event data. Exiting.")
              # repo 変数がこの後使われるため、ここでチェック
              # 実際の値でフォールバックするか、エラー終了するかを決定
              repo = "unknown/repository" # フォールバック例
              # exit(1) # または終了
          else:
              repo = repo_info['full_name']


          if event_name == 'pull_request':
              pr = event.get('pull_request', {}) # event['pull_request'] が存在しない可能性も考慮
              if not pr:
                  print("Event is pull_request, but pull_request data is missing.")
              else:
                  title = pr.get('title', 'No Title')
                  user_data = pr.get('user', {})
                  user = user_data.get('login', 'unknown user')
                  # 'number'はトップレベルにある場合とPRオブジェクト内にある場合がある
                  number = event.get('number', pr.get('number', 'N/A'))
                  pr_link = f"<https://github.com/{repo}/pull/{number}|#{number}>"
                  action = event.get('action', 'unknown action') # event['action'] が存在しない可能性も考慮
                  
                  head_branch = pr.get('head', {}).get('ref', 'unknown branch')
                  base_branch = pr.get('base', {}).get('ref', 'unknown branch')
                  message = f":git: {pr_link} {title}\nPR by {user} was *{action}* ({head_branch} → {base_branch})"


          elif event_name == 'issue_comment' and event.get('issue', {}).get('pull_request'):
              comment_data = event.get('comment', {})
              if not comment_data:
                  print("Event is issue_comment, but comment data is missing.")
              else:
                  commenter_data = comment_data.get('user',{})
                  commenter = commenter_data.get('login', 'unknown commenter')
                  if 'copilot' in commenter.lower() or '[bot]' in commenter.lower(): # [bot]も除外する例
                      print(f"Comment from {commenter}. Skipping.")
                      exit(0)

                  body = comment_data.get('body', '')
                  lines = body.strip().splitlines()
                  if len(lines) > 4:
                      body = "\n".join(lines[:4] + ['...'])

                  issue_data = event.get('issue', {})
                  number = issue_data.get('number', 'N/A')
                  pr_title = issue_data.get('title', 'No PR Title')
                  pr_link = f"<https://github.com/{repo}/pull/{number}|#{number}>"
                  message = f":speech_balloon: {pr_link} {pr_title}\nComment by {commenter}:\n{body}"

          if message:
              with open('payload.json', 'w') as f:
                  json.dump({"text": message}, f)
              print("Payload written to payload.json.")
          else:
              print("No relevant message to send for this event.")
              # exit(0) # ここで exit(0) すると Slack 通知ステップもスキップされる

        shell: python
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
