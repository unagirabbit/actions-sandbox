name: Handle Pull Request Events and Notify Slack

on:
  issue_comment: # PRへの通常のコメント用
    types: [created]
  pull_request:
    types:
      - opened         # PR作成
      - edited         # PR本文編集
      - closed         # PRクローズ（マージ含む）
      - reopened       # PR再オープン
      - ready_for_review # PRレビュー準備完了
  pull_request_review: # PRのレビュー（承認など）用
    types: [submitted]

jobs:
  handle-pr-and-notify-slack: # ジョブ名を修正
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Print GitHub event JSON
        run: |
          echo "GitHub Event JSON:"
          cat ${{ github.event_path }}
        shell: bash

      - name: Generate Slack payload
        id: generate_payload
        run: |
          import os
          import json
          import sys

          with open(os.environ['GITHUB_EVENT_PATH']) as f:
              event = json.load(f)

          message = None
          event_name = os.environ['GITHUB_EVENT_NAME']
          repo_full_name = event.get('repository', {}).get('full_name')

          if not repo_full_name:
              print("Error: Repository full_name not found in event payload.")
              sys.exit(1)

          pr_link = ""
          title = ""
          number = None

          # --- Pull Request イベント処理 ---
          if event_name == 'pull_request':
              pr = event.get('pull_request', {})
              action = event.get('action')

              if not pr:
                  print(f"Error: 'pull_request' object not found in {event_name} event.")
                  sys.exit(1)

              number = pr.get('number')
              title = pr.get('title', 'N/A')
              pr_user_login = pr.get('user', {}).get('login', 'unknown user')

              if number is not None:
                  pr_link = f"<https://github.com/{repo_full_name}/pull/{number}|#{number}>"
              else:
                  print("Error: Pull request number not found.")
                  pr_link = "[Link N/A]"

              if action == 'opened':
                  head_branch = pr.get('head', {}).get('ref', 'unknown branch')
                  base_branch = pr.get('base', {}).get('ref', 'unknown branch')
                  message = f":git_new_pr: {pr_link} {title}\nPR Created by {pr_user_login} ({head_branch} → {base_branch})"

              elif action == 'edited':
                  editor = event.get('sender', {}).get('login', 'unknown user')
                  message = f":pencil2: {pr_link} {title}\nPR Body Edited by {editor}"

              elif action == 'closed':
                  if pr.get('merged') == True:
                      merger = pr.get('merged_by', {}).get('login', 'unknown user')
                      base_branch = pr.get('base', {}).get('ref', 'unknown branch')
                      message = f":git_merge: {pr_link} {title}\nPR Merged by {merger} into {base_branch}"
                  else:
                      closer = event.get('sender', {}).get('login', 'unknown user')
                      message = f":git_closed: {pr_link} {title}\nPR Closed by {closer}"

              elif action == 'reopened':
                  reopener = event.get('sender', {}).get('login', 'unknown user')
                  message = f":git_reopened: {pr_link} {title}\nPR Reopened by {reopener}"

              elif action == 'ready_for_review':
                  sender_login = event.get('sender', {}).get('login', 'unknown user')
                  message = f":eyes: {pr_link} {title}\nPR Marked as Ready for Review by {sender_login}"

          # --- Pull Request Review イベント処理 (承認など) ---
          elif event_name == 'pull_request_review':
              review = event.get('review', {})
              pr = event.get('pull_request', {})

              if not review or not pr:
                  print(f"Error: 'review' or 'pull_request' object not found in {event_name} event.")
                  sys.exit(1)

              review_action = event.get('action') # "submitted", "edited", "dismissed"

              if review_action == 'submitted':
                  review_state = review.get('state')
                  reviewer = review.get('user', {}).get('login', 'unknown user')

                  number = pr.get('number')
                  title = pr.get('title', 'N/A')
                  if number is not None:
                      pr_link = f"<https://github.com/{repo_full_name}/pull/{number}|#{number}>"
                  else:
                      pr_link = "[Link N/A]"

                  if review_state == 'approved':
                      message = f":white_check_mark: {pr_link} {title}\nPR Approved by {reviewer}"
                  elif review_state == 'changes_requested':
                      message = f":warning: {pr_link} {title}\nChanges Requested by {reviewer}"
                  elif review_state == 'commented':
                      print(f"Review submitted with comments by {reviewer}, state: {review_state}. Notification for generic review comments is not configured in this path.")
                      comment_text_from_review = review.get('body') # bodyを取得 (Noneの可能性あり)
                      final_comment_body = "" # 表示用の最終的なコメント本文、デフォルトは空文字列

                      if isinstance(comment_text_from_review, str): # bodyが文字列の場合のみ処理
                          final_comment_body = comment_text_from_review.strip() # 前後の空白を除去
                          lines = final_comment_body.splitlines()
                          if len(lines) > 4:
                              final_comment_body = "\n".join(lines[:4] + ['...']) # 4行に丸める
                      # comment_text_from_reviewがNoneの場合、final_comment_bodyは""のまま
                      message = f":speech_balloon: {pr_link} {title}\nReview Comment by {reviewer}:\n{final_comment_body}"


          # --- Issue Comment イベント処理 (PRへのコメント) ---
          elif event_name == 'issue_comment' and event.get('issue', {}).get('pull_request'):
              comment_data = event.get('comment', {})
              issue_data = event.get('issue', {})

              if not comment_data or not issue_data:
                  print(f"Error: 'comment' or 'issue' object not found in {event_name} event on a PR.")
                  sys.exit(1)

              commenter = comment_data.get('user', {}).get('login', 'unknown user')

              if 'copilot' in commenter.lower() or '[bot]' in commenter.lower():
                  print(f"Comment from {commenter}. Skipping.")
                  sys.exit(0)

              body = comment_data.get('body', '').strip()
              lines = body.splitlines()
              if len(lines) > 4:
                  body = "\n".join(lines[:4] + ['...'])

              number = issue_data.get('number')
              title = issue_data.get('title', 'N/A')
              if number is not None:
                  pr_link = f"<https://github.com/{repo_full_name}/pull/{number}|#{number}>"
              else:
                  pr_link = "[Link N/A]"

              message = f":speech_balloon: {pr_link} {title}\nComment by {commenter}:\n{body}"

          # --- メッセージが設定されていれば payload.json に書き出す ---
          if message:
              with open('payload.json', 'w') as f:
                  json.dump({"text": message}, f)
              print(f"Payload written for event: {event_name}, action: {event.get('action', 'N/A')}")
          else:
              print(f"No relevant message generated for event: {event_name}, action: {event.get('action', 'N/A')}. Skipping Slack notification.")
              sys.exit(0)
        shell: python
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }} # Pythonスクリプト内でイベント名を取得するために設定

      - name: Send Slack message
        if: success() && steps.generate_payload.outcome == 'success' # Pythonスクリプトが成功した場合のみ実行 (messageがNoneでexit(0)した場合もこのステップは実行される)
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload-file-path: ./payload.json
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}