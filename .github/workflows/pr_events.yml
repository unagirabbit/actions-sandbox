name: Handle Pull Request Events

on:
  issue_comment:
    types: [created]
  pull_request:
    types: [opened, reopened, closed, ready_for_review]

jobs:
  handle-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Generate Slack payload
        id: generate_payload
        run: |
          import os, json

          with open(os.environ['GITHUB_EVENT_PATH']) as f:
              event = json.load(f)

          # Dump entire event to a file for inspection
          with open('event_dump.json', 'w') as f:
              json.dump(event, f, indent=2)
          print("Full GitHub event payload written to event_dump.json")

          message = None
          event_name = os.environ['GITHUB_EVENT_NAME']
          repo = event['repository']['full_name']

          if event_name == 'pull_request':
              pr = event['pull_request']
              title = pr['title']
              user = pr['user']['login']
              number = event['number']
              pr_link = f"<https://github.com/{repo}/pull/{number}|#{number}>"
              action = event['action']
              message = f":git: {pr_link} {title}\nPR was *{action}* by {user}"

          elif event_name == 'issue_comment' and event.get('issue', {}).get('pull_request'):
              comment = event['comment']
              commenter = comment['user']['login']
              if 'copilot' in commenter.lower():
                  print("Comment from Copilot. Skipping.")
                  exit(0)

              body = comment['body']
              lines = body.strip().splitlines()
              if len(lines) > 4:
                  body = "\n".join(lines[:4] + ['...'])

              number = event['issue']['number']
              pr_title = event['issue']['title']
              pr_link = f"<https://github.com/{repo}/pull/{number}|#{number}>"
              message = f":speech_balloon: {pr_link} {pr_title}\nComment by {commenter}:\n{body}"

          if message:
              with open('payload.json', 'w') as f:
                  json.dump({"text": message}, f)
              print("Payload written.")
          else:
              print("No relevant message to send.")
              exit(0)
        shell: python
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}

      - name: Show raw GitHub event payload
        run: cat event_dump.json

      # - name: Send Slack message
      #   uses: slackapi/slack-github-action@v1.24.0
      #   with:
      #     payload-file-path: ./payload.json
      #   env:
      #     SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
